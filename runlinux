#!/usr/bin/env bash

set -eux

# Constants.
minimal_path="$(dirname "${BASH_SOURCE[0]}"})/minimal/src"
rootfs_path="${minimal_path}/work/rootfs.cpio.gz"
kbuild_output_prefix="${KBUILD_OUTPUT}${KBUILD_OUTPUT:+/}"
vmlinux_path="${kbuild_output_prefix}vmlinux"
bzimage_path="${kbuild_output_prefix}arch/x86/boot/bzImage"
config_path="${kbuild_output_prefix}.config"

# TODO cat README.
usage() {
  F="$(basename "$0")"
  echo "$F [OPTION]... -- [QEMU ARGS]..

Run the Linux kernel from source in QEMU in a one line of Bash.

QEMU ARGS are passed directly to QEMU in addition to other default arguments.

OPTIONS:

  -g             debug the kernel with GDB
  -h             show this help
" 1>&2
}

# Parse command line arguments.
debug=false
while getopts gh OPT; do
  case "$OPT" in
    h)
      usage
      exit 0
      ;;
    g)
      debug=true
      ;;
  esac
done
shift "$(($OPTIND - 1))"

if [ ! -e "$rootfs_path" ]; then
  (
    # BusyBox also uses KBUILD_OUTPUT...
    unset KBUILD_OUTPUT
    cd "$minimal_path"
    ./0_prepare.sh
    ./3_get_busybox.sh
    ./4_build_busybox.sh
    ./5_generate_rootfs.sh
    ./6_pack_rootfs.sh
    cd -
  )
fi

if [ ! -e "$config_path" ]; then
  make mrproper
  make defconfig
fi

if $debug; then
  sed -Ei 's/.*CONFIG_DEBUG_INFO\b/CONFIG_DEBUG_INFO=y/' "$config_path"
  #make silentoldconfig
  make olddefconfig
fi

make bzImage -j $(grep ^processor /proc/cpuinfo | wc -l)

if $debug; then
  qemu-system-x86_64 -enable-kvm -kernel "$bzimage_path" \
                     -initrd "$rootfs_path" -S -s &>/dev/null "$@" &
  gdb -ex "add-auto-load-safe-path ${vmlinux_path}-gdb.py" \
      -ex "file ${vmlinux_path}" \
      -ex 'target remote localhost:1234'
else
  qemu-system-x86_64 -enable-kvm -kernel "$bzimage_path" -initrd "$rootfs_path" "$@"
fi
